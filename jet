#!/usr/bin/env node

const cap = require('caporal');
const importLazy = require('import-lazy')(require);
const {version} = importLazy('./package');

const lndClient = importLazy('./api/connect');
const {listActiveRebalancesFormattedSync} = importLazy('./api/utils');
const {rebalanceHistoryFormattedSync} = importLazy('./api/utils');
const {pendingHtlcsFormattedSync} = importLazy('./api/utils');
const {listForcedClosingFormattedSync} = importLazy('./api/utils');
const {listPeersFormattedSync} = importLazy('./api/utils');
const {readLastLineSync} = importLazy('./api/utils');
const {withCommas} = importLazy('./lnd-api/utils');
const {listFeesSync} = importLazy('./lnd-api/utils');
const {listPeersSync} = importLazy('./lnd-api/utils');
const {listPeersMapSync} = importLazy('./lnd-api/utils');
const {listChannelsSync} = importLazy('./lnd-api/utils');
const {updateChannelSync} = importLazy('./lnd-api/update-channel');
const {listChannels} = importLazy('./api/list-channels');
const {htlcHistoryFormatted} = importLazy('./api/htlc-history');
const {htlcAnalyzerFormatted} = importLazy('./api/htlc-analyzer');
const {htlcAnalyzerNode} = importLazy('./api/htlc-analyzer');
const {classifyPeersSync} = importLazy('./api/utils');
const {resolveNode} = importLazy('./api/utils');
const {resolveChannel} = importLazy('./api/utils');
const {feeHistorySync} = importLazy('./db/utils');
const {listChannelEvents} = importLazy('./db/utils');
const {latestChannelEvents} = importLazy('./db/utils');

const {statSync} = require('fs');
const date = require('date-and-time');

const serviceUtils = importLazy('./service/utils');
const {getServiceNames} = importLazy('./service/utils');
const {stopService} = importLazy('./service/utils');
const {startService} = importLazy('./service/utils');
const {restartService} = importLazy('./service/utils');
const {printStatus} = importLazy('./service/utils');
const {rebalanceStatus} = importLazy('./api/analyze-fees');
const constants = importLazy('./api/constants');
const config = importLazy('./api/config');

const rebalanceApi = importLazy('./api/rebalance');
const {reconnect} = importLazy('./bos/reconnect');
const {isLndAlive} = importLazy('./lnd-api/utils');
const {inactiveChannels} = importLazy('./api/list-channels');

// service names, plus all for restart
const serviceNames = getServiceNames();
var serviceNamesPlus = serviceNames.slice();
serviceNamesPlus.push('all');

cap
  .version(version)

  .command('start', 'Starts a service')
  .argument('<service>', 'Service; use \'all\' to restart all services', serviceNamesPlus)
  .help(`Services: ${serviceNames.join(', ')}`)
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      let msg = startService(args.service);
      if (msg) console.log(msg);
    })
  })

  .command('stop', 'Stops a service')
  .argument('<service>', 'Service; use \'all\' to restart all services', serviceNamesPlus)
  .help(`Services: ${serviceNames.join(', ')}`)
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      stopService(args.service);
    })
  })

  .command('restart', 'Restarts a service')
  .argument('<service>', 'Service; use \'all\' to restart all services', serviceNamesPlus)
  .help(`Services: ${serviceNames.join(', ')}`)
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      restartService(args.service);
    })
  })

  .command('status', 'Shows services status')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      printStatus();
    })
  })

  .command('rebalance', 'Rebalances the node via circular rebalance.')
  .help('Calls BalanceOfSatoshis rebalance api in a loop until the target amount is met or all possible routes are exhausted.')
  .argument('<from>', 'From this peer. Can be a partial alias, a pub id, or a bos tag')
  .argument('<to>', 'To this peer. Can be a partial alias, a pub id, or a bos tag')
  .argument('<amount>', 'Amount in sats')
  .option('--ppm <ppm>', 'Max ppm')
  .option('--mins [mins]', 'Max time to run in minutes')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      const amount = (args.amount < 1000) ? args.amount * 1000000 : args.amount;

      rebalanceApi({
        from: args.from,
        to: args.to,
        amount: amount,
        ppm: options.ppm,
        mins: options.mins
      })  
    })
  })

  .command('peers', 'Lists peers classified into inbound, outbound and balanced based on routing history')
  .help('Notable columns: p - % of [inbound or outbound] routing by the peer out of total [inbound or outbound] across all peers; ppm - peer\'s current ppm rate; margin - rebalance ppm margin, rebalance will be profitable as long as its ppm is below this margin.')
  .option('--days [days]', 'Depth of routing history in days')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      const days = options.days || 1;
      let peers = listPeersFormattedSync(days);
      console.log('classification of peers based on past', days, 'day(s):');
      console.log('inbound peers:');
      if (peers.inbound.length > 0) console.table(peers.inbound);
      console.log('outbound peers:');
      if (peers.outbound.length > 0) console.table(peers.outbound);
      console.log('other peers (low routing volume):');
      if (peers.balanced.length > 0) console.table(peers.balanced);
      if (peers.skipped.length > 0) {
        console.log('skipped peers:');
        console.table(peers.skipped);  
      }
      console.log('all peers:');
      if (peers.all.length > 0) console.table(peers.all);
    })
  })

  .command('fees', 'Lists peer fees')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      let fees = listFeesSync(lndClient);
      //console.log(classified);
      //console.log(fees);
      let formatted = [];
      fees.forEach(f => {
        let name = f.name;
        formatted.push({
          peer: f.name,
          lc_base: f.local.base,
          lc_rate: f.local.rate,
          rm_base: f.remote.base,
          rm_rate: f.remote.rate
        })
      })
      formatted.sort(function(a, b) {
        return b.rm_rate - a.rm_rate;
      })
      console.table(formatted);
    })
  })

  .command('analyze-fees', 'Analyzes peer fees')
  .argument('[node]', 'Pub id or an alias (full or partial) of [outbound] node for fee analysis')
  .option('--profit [profit]', 'Profit margin in % to evaluate fees against')
  .help('Each peers\' channel local and remote fees will be evaluated against the profitability margin')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      if (options.profit < 0 || options.profit > 100) return console.error('profit has to be between 0 and 100');

      const {printFeeAnalysis} = require('./api/analyze-fees');
      let classified = classifyPeersSync(lndClient);
      let chans = [];
      let nodesFound = [];
      if (classified.outbound) {
        classified.outbound.forEach(c => {
          chans.push({chan: c.id, peer: c.peer});
          if (args.node) {
            let lc1 = c.name && c.name.toLowerCase();
            let lc2 = args.node.toLowerCase();
            if (args.node === c.peer || (lc1 && lc1.indexOf(lc2) >= 0)) {
              nodesFound.push(c);
            }
          }
        })
      }
      if (classified.balanced) {
        classified.balanced.forEach(c => {
          chans.push({chan: c.id, peer: c.peer});
          if (args.node) {
            let lc1 = c.name && c.name.toLowerCase();
            let lc2 = args.node.toLowerCase();
            if (args.node === c.peer || (lc1 && lc1.indexOf(lc2) >= 0)) {
              nodesFound.push(c);
            }
          }
        })
      }
      if (args.node) {
        if (nodesFound.length >= 2) {
          let matches = [];
          nodesFound.forEach(n => matches.push(n.name));
          return console.error('multiple node matches found:', matches);
        }
        if (nodesFound.length === 0) return console.error('node not found (possibly an inbound node)');
        let node = nodesFound[0];
        chans = [{chan: node.id, peer: node.peer}];
        let fees = listFeesSync(lndClient, chans);
        return printFeeAnalysis(node.name, node.peer, fees[0].local, fees[0].remote, options.profit);
      }

      let fees = listFeesSync(lndClient, chans);
      let feeMap = {};
      fees.forEach(f => feeMap[f.id] = f);

      let msg = 'analyzing fees for [outbound] peers';
      msg += (options.profit) ? ' based on profit of ' + options.profit + '%' : '. no profit requirements specified'
      console.log('-------------------------------------------------------------')
      console.log(msg);
      console.log('-------------------------------------------------------------')
 
      let unknownPeers = [];
      let count = 0;
      classified.outbound.forEach(c => {
        console.log();  // newline
        if (!feeMap[c.peer]) unknownPeers.push({name: c.name, id: c.peer});
        let num = printFeeAnalysis(c.name, c.peer, feeMap[c.peer].local, feeMap[c.peer].remote, options.profit);
        count += num;
      })
      if (count === 0) console.log('no issues to report');

      msg = 'analyzing fees for [balanced] peers';
      msg += (options.profit) ? ' based on profit of ' + options.profit + '%' : '. no profit requirements specified'
      console.log('\n-------------------------------------------------------------')
      console.log(msg);
      console.log('-------------------------------------------------------------')

      count = 0;
      classified.balanced.forEach(c => {
        console.log();  // newline
        if (!feeMap[c.peer]) unknownPeers.push({name: c.name, id: c.peer});
        let num = printFeeAnalysis(c.name, c.peer, feeMap[c.peer].local, feeMap[c.peer].remote, options.profit);
        count += num;
      })
      if (count === 0) console.log('no issues to report');

      if (unknownPeers.length > 0) {
        console.log(constants.colorYellow, '\nunknown fee data for the following peers (excluded):');
        unknownPeers.forEach(p => {
          console.log(p.name, p.id);
        })
      }
    })
  })

  .command('htlc-history', 'Prints cumulative htlcs history for peers')
  .argument('[days]', 'Depth of history in days')
  .help('Prints % of total inbound / outbound routing for each peer (e.g. inbound routing from D++ takes 25% of total inbound traffic across all peers), and % of inbound / outbound routing for a peer (e.g. inbound routing from D++ takes 95% of total routing from D++)')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      let days = args.days || 7;  // hardcoded??
      let history = htlcHistoryFormatted(days);
      console.log('htlc history over the past', days, 'days');
      if (history.unknown) {
        console.log('unknown channels:', history.unknown);
      }
      console.log('inbound routing:');
      console.table(history.inbound);
      console.log('outbound routing:');
      console.table(history.outbound);
      if (history.noTraffic) {
        console.log('no routing:');
        console.table(history.noTraffic);
      }
    })
  })

  .command('htlc-analyzer', 'Prints stats about failed htlcs')
  .argument('[node]', 'Pub id or an alias (full or partial) of [outbound] node for htlc analysis')
  .option('--days [days]', 'Depth of history in days. Can provide partial days, e.g., .5 days (12 hours)')
  .option('--hours [hours]', 'Depth of history in hours.')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      try {
        const isInt = n => n % 1 === 0;
        let days = options.days || 1;
        days = (options.hours) ? options.hours / 24 : days;

        let showDays = isInt(days) ? days : days.toFixed(2);
        let showHours = isInt(days * 24) ? days * 24 : (days * 24).toFixed(1);
        console.log('htlc analysis over the past', showDays, 'day(s) or', showHours, 'hour(s)');
        console.log('terminology: missed routing opportunity are htlcs that an [outbound] peer would\'ve routed if it had enough [local] liquidity');

        if (args.node) {
          let formatted = htlcAnalyzerNode(args.node, days);
          if (formatted) {
            console.log('node: ' + formatted.stats.name + ', ' + formatted.stats.id);
            console.log('missed htlc count: ' + formatted.stats.count + ', total missed sats: ' + withCommas(formatted.stats.total) + ', avg htlc size in sats: ' + withCommas(formatted.stats.avg));

            console.log('\ndetailed breakdown of missed htlcs for [inbound] peers:');
            console.log('-from: [inbound] peer that attempted to route sats');
            console.log('-sats: total missed sats for the peer');
            console.log('-count: # of missed htlcs');
            console.log('-avg: average htlc size in sats');
            console.table(formatted.peers);

            console.log('\ndetailed list of missed htlcs:');
            console.table(formatted.list);
          } else {
            console.log('no missed htlcs found');
          }
        } else {
          let formatted = htlcAnalyzerFormatted(days);
          if (formatted) {
            console.log('\ndetailed breakdown of missed htlcs for [outbound] peers:');
            console.log('-to: [outbound] peer that attempted to route sats');
            console.log('-sats: total missed sats for the peer');
            console.log('-count: # of missed htlcs');
            console.log('-avg: average htlc size in sats');
            console.log('-p: total missed sats for the peer as a % of the total across all peers');
            console.table(formatted.peers);

            console.log('\ndetailed breakdown of missed htlcs for peer pairs:');
            console.log('-from: [inbound] peer that attempted to route sats');
            console.log('-to: [outbound] peer');
            console.log('-sats: total missed sats for the [outbound] peer');
            console.log('-avg: average htlc size in sats');
            console.log('-count: # of missed htlcs');
            console.log('-p: total missed sats for the peer pair as a % of the total across all peers');
            console.table(formatted.list);
          } else {
            console.log('no missed htlcs found');            
          }
        }
      } catch(error) {
        console.error(error.toString());
      }
    })
  })

  .command('rebalance-history', 'Lists past rebalances')
  .argument('[node]', 'Pub id or an alias (full or partial)')
  .option('--mins [mins]', 'Depth of history in minutes')
  .option('--hours [hours]', 'Depth of history in hours')
  .option('--filter [filter]', 'Filter by success or failed', ['success', 'failed'])
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      let secs = (options.hours) ? options.hours * 60 * 60 : -1;
      secs = (options.mins) ? options.mins * 60 : secs;
      
      // find matches
      let id;
      let name;
      if (args.node) {
        let matches = resolveNode(args.node);
        if (!matches) return console.error('no matches found');
        else if (matches.length >= 2) return console.error('multiple matches found:', matches);
        id = matches[0].id;
        name = matches[0].name;
      }

      let formatted = rebalanceHistoryFormattedSync(secs, options.filter, id);
      let msg = 'rebalance history';
      if (options.mins) msg += ' over the past ' + options.mins + ' min(s)';
      if (options.hours) msg += ' over the past ' + options.hours + ' hour(s)';
      if (name) msg += ' for ' + name;
      msg += '\n  date  - when rebalance started';
      msg += '\n  secs  - how long rebalance ran in seconds';
      msg += '\n  min   - minimum max ppm required for rebalance to go through';
      msg += '\n  type  - rebalance type: regular (from inbound to outbound peers), low volume (between low volume peers), missed (based on missed htlcs), forward (ad-hock on forwards)';
      console.log(msg);
      if (!formatted || formatted.length === 0) console.log('no entries found');
      else console.table(formatted);
    })
  })

  .command('list-peers', 'Lists peer aliases and ids')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      let peers = listPeersSync(lndClient);
      let peerNames = [];
      peers.forEach(p => {
        peerNames.push({
          name: (p.active) ? p.name : '💀 ' + p.name,
          id: p.id,
          active: p.active
        })
      })
      peerNames.sort(function(a, b) {
        return a.name.localeCompare(b.name);
      })
      console.table(peerNames);
    })
  })

  .command('list-channels', 'Lists channels along force closing ones')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      const chans = listChannels();
      if (!chans) return console.log('no channels found, likely due to an error');
      if (chans.active && chans.active.length > 0) {
        console.log('active channels:');
        console.table(chans.active);
      }

      // list inactive channels if any
      const inactive = inactiveChannels();
      if (inactive && inactive.length > 0) {
        console.log('\ninactive channels:\n-mins: shows how long a channel has been inactive in minutes (based on recorded channel events)');
        console.table(inactive);
      }

      if (chans.updates && chans.updates.length > 0) {
        console.log('\ntop channels based on updates:');
        console.log('-updates: number of channel state updates');
        console.log('-p: channel updates as a % out of the total across all channels');
        console.table(chans.updates);
      }
      if (chans.pending && chans.pending.length > 0) {
        console.log('\nforced closing channels:');
        console.table(chans.pending);
      }
    })
  })

  .command('monitor', 'Prints information about ongoing rebalances and stuck htlcs')
  .argument('[secs]', 'Refresh delay in seconds')
  .option('--status', 'Prints rebalance status for peers')
  .option('--current', 'Lists rebalances in progress')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      const delay = args.secs || constants.monitor.refresh;  // in seconds
      const inProgress = !!options.current;
      console.log('loading data...');
      if (options.status) {
        runMonitorStatusLoop();
        setInterval(runMonitorStatusLoop, delay * 1000);
      } else {
        runMonitorLoop(inProgress);
        setInterval(runMonitorLoop, delay * 1000, inProgress);
      }
    })
  })

  .command('fee-history', 'Prints fee history for a peer')
  .argument('[node]', 'Pub id or an alias (full or partial)')
  .option('--hours [hours]', 'Depth of history in hours')
  .option('--days [days]', 'Depth of history in days')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      // find matches
      let id, name, peerMap;

      if (args.node) {
        let matches = resolveNode(args.node);
        if (!matches) return console.error('no matches found');
        else if (matches.length >= 2) return console.error('multiple matches found:', matches);

        id = matches[0].id;
        name = matches[0].name;
      } else {
        peerMap = {};
        let peers = listPeersSync(lndClient);
        peers.forEach(p => peerMap[p.id] = p.name);
      }

      let hours = options.hours || (options.days && options.days * 24) || 24 * 7;  // one week by default
      let req = {mins:hours * 60};
      if (id) req.node = id;
      let history = feeHistorySync(req);

      let str;
      if (hours > 24) {
        str = Math.floor(hours/24) + ' days';
        if (hours%24 > 0) str += ' and ' + hours%24 + ' hours';
      } else {
        str = hours + ' hours';
      }

      if (name) console.log('fee history for', name, 'over the past', str);
      else console.log('fee history over the past', str);
      if (!history || history.length === 0) return console.log('no history found');

      history.sort((a, b) => { return b.date - a.date });
      let formatted = [];
      let min = Number.MAX_SAFE_INTEGER, max = 0, avg = 0, sum = 0;
      history.forEach(h => {
        if (h.ppm) {
          sum += h.ppm;
          min = Math.min(min, h.ppm);
          max = Math.max(max, h.ppm);
        }
        let entry = { date: date.format(new Date(h.date), 'MM/DD hh:mm A') };
        if (!id) entry.peer = peerMap[h.node] || h.node;
        if (h.base) entry.base = h.base;
        if (h.ppm) entry.ppm = h.ppm;
        formatted.push(entry);
      })
      console.log('count:', history.length, 'min:', min, 'max:', max, 'avg:', (sum/history.length).toFixed(1));
      console.table(formatted);
    })
  })

  .command('channel-events', 'Lists channel events')
  .option('--hours [hours]', 'Depth of history in hours')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      const hours = options.hours || 24;
      const list = listChannelEvents({hours});
      if (!list || list.length === 0) return console.log('no events found');

      let chanMap = {};
      const chans = listChannelsSync(lndClient);
      chans.forEach(c => {
        chanMap[c.channel_point] = c;
      })
      const peerMap = listPeersMapSync(lndClient);
      let formatted = [];
      let notFound = {};
      list.forEach(event => {
        const key = event.txid + ':' + event.ind;
        const chan = chanMap[key];
        if (!chan) {
          if (!notFound[key]) {
            console.warn('did not find channel for channel point ' + key + '; the channel was likely closed');
            notFound[key] = true;
          }
          return;
        }
        const peer = peerMap[chan.remote_pubkey];
        let item = {};
        item.date = date.format(new Date(event.date), 'MM/DD hh:mm:ss A');
        item.type = event.type;
        item.chan = chan.chan_id;
        item.peer = peer.id;
        item.name = peer.name;
        formatted.push(item);
      })
      
      const inactive = inactiveChannels();
      if (inactive && inactive.length > 0) {
        console.log('\nlist of inactive channels; mins column denotes how long a channel has been inactive in minutes (based on recorded channel events)');
        console.table(inactive);
      }
      let msg = 'list of channel events';
      if (hours) msg += ' over the past ' + hours + ' hours';
      console.log('\n' + msg);
      console.table(formatted);
    })
  })

  .command('channeldb', 'Prints stats about the channel.db')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      const {getPath} = require('./api/channeldb');
      const {printCheckSize} = require('./api/channeldb');
      console.log('channel.db is located at', getPath());
      printCheckSize();
    })
  })

  .command('send-message', 'Sends a message to a node via keysend')
  .argument('<node>', 'Node pub id')
  .argument('<message>', 'Message to send')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      const {sendMessage} = require('./api/send-message');
      sendMessage(args.node, args.message);
    })
  })

  .command('update-channel', 'Updates fees on a channel')
  .help('Requires admin.macaroon in api/config.json')
  .argument('<chan>', 'Channel id')
  .option('--base [base]', 'Base fee in msats')
  .option('--ppm [ppm]', 'Ppm in sats per million')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      const matches = resolveChannel(args.chan);
      if (!matches) return console.error('found no matches');
      if (matches.length > 1) return console.error('found multiple matches: ' + matches);

      console.log('updating', matches[0]);
      updateChannelSync(lndClient, {chan: matches[0], base: options.base, ppm: options.ppm});
      console.log('updated');
    })
  })

  .command('reconnect', 'Reconnects to disconnected peers')
  .help('Same as BalanceOfSatoshis (bos) reconnect; calls bos api')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      if (!isLndAlive(lndClient)) return reject('lnd is offline');

      reconnect(logger);
    })
  })

cap.parse(process.argv);


function runMonitorStatusLoop() {
  console.clear();
  console.log(date.format(new Date, 'MM/DD hh:mm:ss A'));

  if (!serviceUtils.Rebalancer.isRunning()) {
    return console.log('rebalancer isnt running');
  }

  let arr = rebalanceStatus();
  if (arr.outbound.length === 0)  {
    console.log('no [outbound] peers found');
  } else {
    console.log('rebalance status for [outbound] peers');
    console.table(arr.outbound);
  }
  if (arr.balanced.length === 0)  {
    console.log('no [balanced] peers found');
  } else {
    console.log('\nrebalance status for [balanced] peers');
    console.table(arr.balanced);
  }
}

function runMonitorLoop(inProgress) {
  const hours = 4;

  // load data before clearing screen
  let list = listActiveRebalancesFormattedSync();

  let htlcs, history, closed;
  if (!inProgress) {
    htlcs = pendingHtlcsFormattedSync();
    history = rebalanceHistoryFormattedSync(hours * 60 * 60).filter(r => r.status === 'success');
    closed = listForcedClosingFormattedSync();
  }

  console.clear();

  // active rebalances
  console.log(date.format(new Date, 'MM/DD hh:mm:ss A'));
  if (list) {
    list.forEach(l => l.amount = withCommas(l.amount));
    list.sort(function(a, b) { return a.from.localeCompare(b.from); });
    console.log('rebalances in progress:');
    console.table(list);
  } else {
    console.log('no active rebalances');
  }

  if (inProgress) return; // show only in-progress rebalances

  // rebalance history
  const maxHistoryLines = constants.monitor.rebalanceHistoryLines;
  if (history.length > 0) {
    console.log(`\nsuccessful rebalances over the past ${hours} hour(s) (${maxHistoryLines} max lines):`);
    console.table(history.slice(0, maxHistoryLines));
  }

  // pending htlcs
  if (htlcs && htlcs.length > 0) {
    console.log('\npending htlcs:');
    console.table(htlcs);
  }

  // forced closed
  if (closed && closed.length > 0) {
    console.log('\nforced closing channels:');
    console.table(closed);  
  }

  console.log('\nservices:');
  printStatus();
  // warn about daddy, as it has to be on all the time. telegram needs to be first
  // configured, so add an extra warning in the monitor
  if (!serviceUtils.Launcher.isRunning()) {
    console.error(constants.colorYellow, 'daddy service is not running, this means that other services won\'t be auto-restarted in case of an error. jet start daddy');
  }
  if (!serviceUtils.TelegramBot.isRunning()) {
    console.error(constants.colorYellow, 'telegram bot service is not running, you won\'t get notified about important events.', constants.telegramBotHelpPage);
  }

  // check that the auto rebalancer isnt stuck
  let last = readLastLineSync(serviceUtils.Rebalancer.log);
  if (last && last.toLowerCase().indexOf('error') >= 0) {
    console.error(constants.colorRed, '\ndetected an error in the rebalancer log file:', last);
    console.log('it is possible that the rebalancer is stuck. consider restarting: jet restart rebalancer');

    // notify via telegram
    const {sendTelegramMessageTimed} = require('./api/utils');
    const interval = 5; // minutes
    const msg = 'detected an error in the rebalancer log file. the rebalancer may be stuck. consider restarting: jet restart rebalancer';
    sendTelegramMessageTimed(msg, 'telegramNotifiedRebalancerError', interval * 60);
  }

  // check channel db size
  try {
    const {printCheckSize} = require('./api/channeldb');
    console.log();
    printCheckSize();
  } catch(error) {
    console.error(constants.colorRed, 'error checking channel.db size:', error.toString());
  }
}
